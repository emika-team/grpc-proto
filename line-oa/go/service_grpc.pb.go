// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service.proto

package line_oa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LineOAMessageClient is the client API for LineOAMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LineOAMessageClient interface {
	GetMessageContent(ctx context.Context, in *GetMessageContentRequest, opts ...grpc.CallOption) (*GetMessageContentResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type lineOAMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewLineOAMessageClient(cc grpc.ClientConnInterface) LineOAMessageClient {
	return &lineOAMessageClient{cc}
}

func (c *lineOAMessageClient) GetMessageContent(ctx context.Context, in *GetMessageContentRequest, opts ...grpc.CallOption) (*GetMessageContentResponse, error) {
	out := new(GetMessageContentResponse)
	err := c.cc.Invoke(ctx, "/lineoaservice.LineOAMessage/GetMessageContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lineOAMessageClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/lineoaservice.LineOAMessage/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LineOAMessageServer is the server API for LineOAMessage service.
// All implementations must embed UnimplementedLineOAMessageServer
// for forward compatibility
type LineOAMessageServer interface {
	GetMessageContent(context.Context, *GetMessageContentRequest) (*GetMessageContentResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedLineOAMessageServer()
}

// UnimplementedLineOAMessageServer must be embedded to have forward compatible implementations.
type UnimplementedLineOAMessageServer struct {
}

func (UnimplementedLineOAMessageServer) GetMessageContent(context.Context, *GetMessageContentRequest) (*GetMessageContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageContent not implemented")
}
func (UnimplementedLineOAMessageServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedLineOAMessageServer) mustEmbedUnimplementedLineOAMessageServer() {}

// UnsafeLineOAMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LineOAMessageServer will
// result in compilation errors.
type UnsafeLineOAMessageServer interface {
	mustEmbedUnimplementedLineOAMessageServer()
}

func RegisterLineOAMessageServer(s grpc.ServiceRegistrar, srv LineOAMessageServer) {
	s.RegisterService(&LineOAMessage_ServiceDesc, srv)
}

func _LineOAMessage_GetMessageContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineOAMessageServer).GetMessageContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lineoaservice.LineOAMessage/GetMessageContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineOAMessageServer).GetMessageContent(ctx, req.(*GetMessageContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LineOAMessage_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LineOAMessageServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lineoaservice.LineOAMessage/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LineOAMessageServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LineOAMessage_ServiceDesc is the grpc.ServiceDesc for LineOAMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LineOAMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lineoaservice.LineOAMessage",
	HandlerType: (*LineOAMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessageContent",
			Handler:    _LineOAMessage_GetMessageContent_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _LineOAMessage_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
